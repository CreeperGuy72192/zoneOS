'PPTGames Cursor Api
Public Declare PtrSafe Function GetAsyncKeyState Lib "user32" (ByVal vKey As Long) As Integer


' ==============================================================
'
' ##############################################################
' #                                                            #
' #                    PPTGames Cursor API                     #
' #                      CursorAPI Module                      #
' #                                                            #
' ##############################################################
'
' » version 1.0.0
'
' » https://pptgamespt.wixsite.com/pptg-coding/cursor-api
'
' ===============================================================


Option Explicit

Private Const SM_SCREENX = 0, SM_SCREENY = 1, LOGPIXELSX As Long = 88
Private mPoint As POINTAPI, dx As Double, dy As Double

Public Enum CursorIcon
    IDC_APPSTARTING = 32650 'Standard arrow and small hourglass
    IDC_ARROW = 32512 'Standard arrow
    IDC_CROSS = 32515 'Crosshair
    IDC_HAND = 32649 'Hand
    IDC_HELP = 32651 'Arrow and question mark
    IDC_IBEAM = 32513 'i -beam
    IDC_ICON = 32641 'Obsolete for applications marked version 4.0 or later.
    IDC_NO = 32648 'Slashed circle
    IDC_SIZE = 32640 'Obsolete for applications marked version 4.0 or later. Use IDC_SIZEALL.
    IDC_SIZEALL = 32646 'Four-pointed arrow pointing north, south, east, and west
    IDC_SIZENESW = 32643 'Double-pointed arrow pointing northeast and southwest
    IDC_SIZENS = 32645 'Double-pointed arrow pointing north and south
    IDC_SIZENWSE = 32642 'Double-pointed arrow pointing northwest and southeast
    IDC_SIZEWE = 32644 'Double-pointed arrow pointing west and east
    IDC_UPARROW = 32516 'Vertical arrow
    IDC_WAIT = 32514 'Hourglass
End Enum

Private Type POINTAPI
    X As Long
    Y As Long
End Type

Private Type RECT
    lLeft As Long
    lTop As Long
    lRight As Long
    lBottom As Long
End Type

    Private Declare PtrSafe Function WindowFromPoint Lib "user32" (ByVal xPoint As LongPtr, ByVal yPoint As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowRect Lib "user32" (ByVal Hwnd As LongPtr, lpRect As RECT) As LongPtr
    Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As LongPtr
    Private Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal nIndex As LongPtr) As LongPtr
    Private Declare PtrSafe Function LoadCursor Lib "user32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    Private Declare PtrSafe Function SetCursor Lib "user32" (ByVal hCursor As Long) As Long
    Private Declare PtrSafe Function SetCursorPos Lib "user32" (ByVal X As Long, ByVal Y As Long) As Long
    Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32.dll" (ByVal hdc As Long, ByVal nIndex As Long) As Long
    Private Declare PtrSafe Function GetDC Lib "user32.dll" (ByVal Hwnd As Long) As Long
    Private Declare PtrSafe Function ReleaseDC Lib "user32.dll" (ByVal Hwnd As Long, ByVal hdc As Long) As Long

Private Function GetDpi() As Long
    Dim hdcScreen As Long
    Dim iDPI As Long
    iDPI = -1
    hdcScreen = GetDC(0)
    If (hdcScreen) Then
        iDPI = GetDeviceCaps(hdcScreen, LOGPIXELSX)
        ReleaseDC 0, hdcScreen
    End If
    GetDpi = iDPI
End Function

Public Function SetCursorIcon(Cursor As CursorIcon)
    SetCursor LoadCursor(0, Cursor)
End Function

Public Sub SetCursorPosition(X As Double, Y As Double, Optional AsPoints As Boolean = True)
    If AsPoints Then
        SetCursorPos X * GetDpi / 72 * ActivePresentation.SlideShowWindow.View.Zoom / 100, Y * GetDpi / 72 * ActivePresentation.SlideShowWindow.View.Zoom / 100
    Else
        SetCursorPos X, Y
    End If
End Sub

Public Function GetCursorPositionX(Optional AsPoints As Boolean = True) As Double
    If AsPoints Then
        On Error Resume Next
        #If VBA7 Then
            Dim mWnd As LongPtr
        #Else
            Dim mWnd As Long
        #End If
        Dim sx As Long, sy As Long
        Dim WR As RECT
        GetCursorPos mPoint
        mWnd = WindowFromPoint(mPoint.X, mPoint.Y)
        GetWindowRect mWnd, WR
        sx = WR.lLeft
        sy = WR.lTop
        With ActivePresentation.PageSetup
            dx = (WR.lRight - WR.lLeft) / .SlideWidth
            dy = (WR.lBottom - WR.lTop) / .SlideHeight
            Select Case True
            Case dx > dy
                sx = sx + (dx - dy) * .SlideWidth / 2
                dx = dy
            Case dy > dx
                sy = sy + (dy - dx) * .SlideHeight / 2
                dy = dx
            End Select
        End With
        GetCursorPos mPoint
        GetCursorPositionX = (mPoint.X - sx) / dx
    Else
        GetCursorPos mPoint
        GetCursorPositionX = mPoint.X
    End If
End Function
Public Function GetCursorPositionY(Optional AsPoints As Boolean = True) As Double
    If AsPoints Then
        On Error Resume Next
        #If VBA7 Then
            Dim mWnd As LongPtr
        #Else
            Dim mWnd As Long
        #End If
        Dim sx As Long, sy As Long
        Dim WR As RECT
        GetCursorPos mPoint
        mWnd = WindowFromPoint(mPoint.X, mPoint.Y)
        GetWindowRect mWnd, WR
        sx = WR.lLeft
        sy = WR.lTop
        With ActivePresentation.PageSetup
        dx = (WR.lRight - WR.lLeft) / .SlideWidth
        dy = (WR.lBottom - WR.lTop) / .SlideHeight
        Select Case True
        Case dx > dy
            sx = sx + (dx - dy) * .SlideWidth / 2
            dx = dy
        Case dy > dx
            sy = sy + (dy - dx) * .SlideHeight / 2
            dy = dx
        End Select
        End With
        GetCursorPos mPoint
        GetCursorPositionY = (mPoint.Y - sy) / dy
    Else
        GetCursorPos mPoint
        GetCursorPositionY = mPoint.Y
    End If
End Function

